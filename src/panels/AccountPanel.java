/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import Database.AccountData;
import static Database.AccountData.getCustomerID;
import static Database.AccountData.getCustomerType;
import Database.Connect;
import Database.DebtData;
import Database.HomeData;
import Database.Retrieve;
import Files.CustomersReports;
import Views.FilterComboBox;
import invoice.WriteDOCX;
import java.awt.Desktop;
import java.awt.print.PrinterException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.helpers.DateTimeDateFormat;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.apache.xmlbeans.XmlException;
import sedra.Colors;
import static sedra.SedraUI.height;
import static sedra.SedraUI.width;

/**
 *
 * @author mohammed
 */
public class AccountPanel extends javax.swing.JPanel {

    private float val;
    private String customerType;
    private Statement stmt2;

    /**
     * Creates new form AccountPanel
     */
    public AccountPanel() {

        initComponents();
        setBounds(0, 0, 3 * width / 4, height);
        homePanel.setBounds(0, 0, 3 * width / 4, 3 * height);
        jPanel2.setBounds(0, 0, 3 * width / 4, height / 4);
        customerAccountPane.setBounds(0, height / 4, 3 * width / 4, 3 * height / 4);
        allCustomerInvoices.setBounds(0, height / 4, (3 * width / 4) - 5, (3 * height / 4) - 250);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        customerTypeComboSearch = new javax.swing.JComboBox<String>();
        customerNameIDComboSearch = new FilterComboBox((List) new ArrayList());
        stus = new javax.swing.JComboBox();
        fromDate = new org.jdesktop.swingx.JXDatePicker();
        toDate = new org.jdesktop.swingx.JXDatePicker();
        jButton4 = new javax.swing.JButton();
        specificCode = new javax.swing.JCheckBox();
        customerAccountPane = new javax.swing.JPanel();
        customerName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        customerPhone = new javax.swing.JLabel();
        haveToPay = new javax.swing.JLabel();
        customerAddress = new javax.swing.JLabel();
        customerMail = new javax.swing.JLabel();
        customerPhone1 = new javax.swing.JLabel();
        customerPhone2 = new javax.swing.JLabel();
        customerPhone3 = new javax.swing.JLabel();
        customerPhone4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        allCustomerInvoices = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        payByInvoice = new javax.swing.JButton();
        customerPhone5 = new javax.swing.JLabel();
        setDiscount = new javax.swing.JLabel();
        PayByCode = new javax.swing.JButton();

        setLayout(null);

        homePanel.setBackground(new java.awt.Color(255, 255, 255));
        homePanel.setLayout(null);

        jPanel2.setBackground(Colors.HEAD_COLOR);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(Colors.TITLES_COLOR);
        jLabel4.setText("Customer Account");

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel17.setForeground(Colors.TITLES_COLOR);
        jLabel17.setText("Search for ");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-Search_28.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });

        customerTypeComboSearch.setBackground(Colors.FIELDS_COLOR);
        customerTypeComboSearch.setForeground(new java.awt.Color(64, 43, 100));
        customerTypeComboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Doctor", "Customer" }));
        customerTypeComboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerTypeComboSearchActionPerformed(evt);
            }
        });

        customerNameIDComboSearch.setBackground(Colors.FIELDS_COLOR);
        customerNameIDComboSearch.setForeground(new java.awt.Color(64, 43, 100));
        customerNameIDComboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        customerNameIDComboSearch.setBorder(null);
        customerNameIDComboSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        customerNameIDComboSearch.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        stus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "الكل", "المدفوع", "الغير مدفوع" }));

        jButton4.setBackground(Colors.HEAD_COLOR);
        jButton4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("جرد جزئى");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        specificCode.setText("كود معين");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerTypeComboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerNameIDComboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(137, 137, 137)
                        .addComponent(specificCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specificCode))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerTypeComboSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(customerNameIDComboSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(stus, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        homePanel.add(jPanel2);
        jPanel2.setBounds(0, 0, 0, 0);

        customerAccountPane.setBackground(Colors.PANELS_COLOR);

        customerName.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        customerName.setForeground(Colors.LABELS_COLOR);
        customerName.setText(" ");
        customerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerNameMouseClicked(evt);
            }
        });

        customerPhone.setForeground(Colors.LABELS_COLOR);
        customerPhone.setText(" ");

        haveToPay.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        haveToPay.setForeground(Colors.LABELS_COLOR);
        haveToPay.setText(" ");

        customerAddress.setForeground(Colors.LABELS_COLOR);
        customerAddress.setText(" ");

        customerMail.setForeground(Colors.LABELS_COLOR);
        customerMail.setText(" ");

        customerPhone1.setForeground(Colors.LABELS_COLOR);
        customerPhone1.setText("Phone:");

        customerPhone2.setForeground(Colors.LABELS_COLOR);
        customerPhone2.setText("Address:");

        customerPhone3.setForeground(Colors.LABELS_COLOR);
        customerPhone3.setText("E-Mail:");

        customerPhone4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        customerPhone4.setForeground(Colors.LABELS_COLOR);
        customerPhone4.setText("Have to pay:");

        allCustomerInvoices.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        allCustomerInvoices.setForeground(new java.awt.Color(1, 1, 1));
        allCustomerInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Invoice ID", "Name", "Size", "Quantity", "Price", "Done", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allCustomerInvoices.setRowHeight(40);
        jScrollPane3.setViewportView(allCustomerInvoices);

        jButton1.setBackground(Colors.SIDE_COLOR);
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setForeground(Colors.PANELS_COLOR);
        jButton1.setText("مرتجع");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(Colors.SIDE_COLOR);
        jButton2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton2.setForeground(Colors.PANELS_COLOR);
        jButton2.setText("دفع آجل");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        payByInvoice.setBackground(Colors.SIDE_COLOR);
        payByInvoice.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        payByInvoice.setForeground(Colors.PANELS_COLOR);
        payByInvoice.setText("دفع تفصيلى بالفاتورة");
        payByInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payByInvoiceActionPerformed(evt);
            }
        });

        customerPhone5.setForeground(Colors.LABELS_COLOR);
        customerPhone5.setText("Discount");

        setDiscount.setForeground(Colors.LABELS_COLOR);
        setDiscount.setText("Discount");

        PayByCode.setBackground(Colors.SIDE_COLOR);
        PayByCode.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PayByCode.setForeground(Colors.PANELS_COLOR);
        PayByCode.setText("دفع تفصيلى بالكود");
        PayByCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayByCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerAccountPaneLayout = new javax.swing.GroupLayout(customerAccountPane);
        customerAccountPane.setLayout(customerAccountPaneLayout);
        customerAccountPaneLayout.setHorizontalGroup(
            customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerAccountPaneLayout.createSequentialGroup()
                        .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                        .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(customerPhone5)
                                        .addGap(26, 26, 26)
                                        .addComponent(setDiscount))
                                    .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                        .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                                .addComponent(customerPhone1)
                                                .addGap(18, 18, 18)
                                                .addComponent(customerPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                                .addComponent(customerPhone3)
                                                .addGap(18, 18, 18)
                                                .addComponent(customerMail, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                                .addComponent(customerPhone2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(customerAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                                                .addComponent(customerPhone4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(haveToPay, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addContainerGap(89, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerAccountPaneLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(payByInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PayByCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(145, 145, 145))))
            .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(customerAccountPaneLayout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 884, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
        );
        customerAccountPaneLayout.setVerticalGroup(
            customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerAccountPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(PayByCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(payByInvoice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerName)
                    .addComponent(customerPhone5)
                    .addComponent(setDiscount))
                .addGap(50, 50, 50)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPhone)
                    .addComponent(customerPhone1)
                    .addComponent(customerPhone2)
                    .addComponent(customerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPhone4)
                    .addComponent(haveToPay)
                    .addComponent(customerPhone3)
                    .addComponent(customerMail))
                .addContainerGap(266, Short.MAX_VALUE))
            .addGroup(customerAccountPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerAccountPaneLayout.createSequentialGroup()
                    .addContainerGap(275, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(50, 50, 50)))
        );

        homePanel.add(customerAccountPane);
        customerAccountPane.setBounds(0, 0, 890, 589);

        add(homePanel);
        homePanel.setBounds(0, 0, 0, 0);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        try {
            
            String fromDFormat = null;
            String toDFormat = null;
            Date fromD = fromDate.getDate();
            Date toD = toDate.getDate();
            DateFormat dateFormat = new DateTimeDateFormat();
            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd 00:00:01");

            // *** same for the format String below
            boolean flag = false;
            if (toD == null || toD.after(new Date())) {
                toD = new Date();
                if (fromD != null) {
                    if (toD.before(fromD)) {
                        toD = new Date();
                    }
                }
            }
            if (fromD != null) {
                flag = true;
                fromDFormat = dt.format(fromD);
                toDFormat = dt.format(toD);

            }

            // TODO add your handling code here:
            String name = customerNameIDComboSearch.getSelectedItem().toString();
            if (name.length() == 0) {
                JOptionPane.showMessageDialog(this, "رجاء اختيار اسم العميل");
            }
            HashMap hashMap = AccountData.getCustomerData(name);
            customerName.setText((String) hashMap.get("customerName"));
            customerMail.setText((String) hashMap.get("customerMail"));
            customerAddress.setText((String) hashMap.get("customerAddress"));
            customerPhone.setText((String) hashMap.get("customerPhone"));
            setDiscount.setText(String.valueOf(hashMap.get("discount")));
            AccountData.getCustomerID(name);

            AccountData.showHistory(stus.getSelectedIndex(), flag, fromDFormat, toDFormat, haveToPay.getText(), setDiscount.getText(),specificCode.isSelected());
            flag = false;
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unable to get data " + ex.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XmlException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            JFrame f = new NewJFrame(customerNameIDComboSearch.getSelectedItem().toString());
            f.setSize(800, 800);
            f.setVisible(true);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jLabel1MousePressed

    private void payByInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payByInvoiceActionPerformed
        // TODO add your handling code here:
        String recID;
        int customerID;
        String customerNameString = null;
        String line = null;
        recID = JOptionPane.showInputDialog(this, "ادخل رقم الفاتورة");
        if (recID.trim().length() > 0) {
            Connection conn = null;
            Statement stmt = null;
            ResultSet resultSet;

            try {
                conn = DriverManager.getConnection(Connect.URL, Connect.HOST_NAME, Connect.PASSWORD);
                stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                stmt2 = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                resultSet = stmt.executeQuery("SELECT customerID FROM Sales WHERE recID='" + recID + "'");
                resultSet.next();
                customerID = resultSet.getInt(1);
                stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                resultSet = stmt.executeQuery("SELECT customerName FROM Customer WHERE customerID=" + customerID + "");
                resultSet.next();
                customerNameString = resultSet.getString(1);
            } catch (SQLException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    stmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

          //  File f = new File("payment/" + customerNameString + ".txt");
            //if (f.exists()) {
            //  Scanner s = null;
            // try {
            //   s = new Scanner(f);
            //} catch (FileNotFoundException ex) {
            //  Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            //}
            //while (s.hasNext()) {
            //  line = s.nextLine();
            //if (line.contains(recID)) {
            //  break;
            //}
            //}
            //System.err.println(customerNameString);
            try {
                String query = "SELECT costomerType FROM Customer WHERE customerName='" + customerNameString + "'";
                resultSet = stmt2.executeQuery(query);
                resultSet.next();
                customerType = resultSet.getString(1);
            } catch (SQLException sQLException) {
                sQLException.printStackTrace();
            } finally {
                try {
                    stmt.close();
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            // StringTokenizer st = new StringTokenizer(line, ",");
            //st.nextToken();
            //val = Float.parseFloat(st.nextToken());
            NewJFrame2 frame2 = null;
            System.out.println(customerType);

            try {
                frame2 = new NewJFrame2(customerNameString, val, recID, customerType);
            } catch (SQLException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame2.setVisible(true);

        }

        // }
    }//GEN-LAST:event_payByInvoiceActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        daf3Agel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void customerTypeComboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerTypeComboSearchActionPerformed
        // TODO add your handling code here:
        String x = customerTypeComboSearch.getSelectedItem().toString();
        //customerNameIDComboSearch.removeAll();

        if (x.equalsIgnoreCase("Customer")) {
            try {
                customerNameIDComboSearch.setModel(new DefaultComboBoxModel(HomeData.getCustorsList().toArray()));
                //  customerNameIDComboSearch = new FilterComboBox((HomeData.getCustorsList()));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Unable to retrieve data " + ex.getMessage());
            }

        } else {
            try {
                customerNameIDComboSearch.setModel(new DefaultComboBoxModel(HomeData.getDoctorsList().toArray()));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Unable to retrieve data " + ex.getMessage());
            }

        }

    }//GEN-LAST:event_customerTypeComboSearchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Retrieve r = new Retrieve();
        r.increaseStore(customerNameIDComboSearch.getSelectedItem().toString(), customerTypeComboSearch.getSelectedItem().toString());


    }//GEN-LAST:event_jButton1ActionPerformed

    private void customerNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerNameMouseClicked
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().print(new File("ka4fs.docx"));
            //  allCustomerInvoices.print();
        } catch (IOException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerNameMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            String fromDFormat = null;
            String toDFormat = null;
            Date fromD = fromDate.getDate();
            Date toD = toDate.getDate();
            DateFormat dateFormat = new DateTimeDateFormat();
            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd 00:00:01");

            // *** same for the format String below
            boolean flag = false;
            if (toD == null || toD.after(new Date())) {
                toD = new Date();
                if (fromD != null) {
                    if (toD.before(fromD)) {
                        toD = new Date();
                    }
                }
            }
            if (fromD != null) {
                flag = true;
                fromDFormat = dt.format(fromD);
                toDFormat = dt.format(toD);

            }
            Connection conn = DriverManager.getConnection(Connect.URL, Connect.HOST_NAME, Connect.PASSWORD);
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = null;
            float totalPrice = 0;
            int invoiceIndex = 0;
            InputStream inputStream = null;
            try {
                inputStream = new FileInputStream(new File("ka4f.docx"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            XWPFDocument document = null;
            try {
                document = new XWPFDocument(inputStream);
            } catch (IOException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            document.write(baos);
            XWPFTable table = document.getTables().get(0);
            String printInvoiceQuery = "SELECT Sales.itemID,Sales.salesQuantity,"
                    + "(Store.itemDocPrice*Sales.salesQuantity)AS price,Sales.employeeID,"
                    + "Sales.orderTime,Sales.recID,Sales.Size,Sales.salesPaid FROM `Sales`,Store WHERE Store.itemID=Sales.itemID AND"
                    + " Store.itemSize = Sales.Size AND Sales.salesPaid>0 AND Sales.salesQuantity>0";
                    
            if (flag == true) {
                printInvoiceQuery += " And orderTime BETWEEN '" + fromDFormat + "' AND '" + toDFormat + "'";
            }
            if(customerTypeComboSearch.getSelectedItem()=="Doctor"){
                printInvoiceQuery=" AND CustomerType=Doctor";
            } else if(customerTypeComboSearch.getSelectedItem()=="Customer"){
                printInvoiceQuery=" AND CustomerType=Customer";
            }
            
            int totalItems = 0;
            String discount = "";
            rs = stmt.executeQuery(printInvoiceQuery);
            rs.beforeFirst();
            String tempTime = "";
            boolean var = false;
            int tempID = 0;
            String s5 = "";
            DefaultTableModel dtm = (DefaultTableModel) allCustomerInvoices.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                System.out.println(rs.getString(5).substring(0, 16));
                if (var == false) {
                    tempTime = rs.getString(5).substring(0, 16);
                    tempID = rs.getInt(6);
                }

                invoiceIndex++;
                totalPrice += Float.parseFloat(rs.getString(3));
                String s0 = rs.getString(1);
                String s1 = rs.getString(2);
                String s3 = rs.getString(3);
                String s4 = rs.getString(4);
                String s7 = rs.getString(7);
                String s8 = rs.getString(8);

                if (!tempTime.equalsIgnoreCase(rs.getString(5).substring(0, 16))) {
                    s4 = rs.getString(5).substring(0, 16);
                    s5 = String.valueOf(rs.getInt(6));

                } else {
                    s4 = "";
                    s5 = "";
                }
                if (var == false) {
                    System.out.println("var false");
                    s4 = tempTime;
                    s5 = String.valueOf(tempID);
                    var = true;
                }
                totalItems += Integer.parseInt(s1);
                Object data[] = {s4, s5, s0, s7, s1, s3, s8, ""};
                if (!tempTime.equalsIgnoreCase(rs.getString(5).substring(0, 16))) {
                    Object data1[] = {"", "", "", "", "", "", ""};
                    invoiceIndex++;
                    dtm.addRow(data1);

                    tempTime = s4;

                }

                dtm.addRow(data);

            }

            rs.first();
            Object data1[] = {"", "", "", "", "", "", ""};
            WriteDOCX cX = new WriteDOCX();

            dtm.addRow(data1);
            invoiceIndex++;
            allCustomerInvoices.setValueAt(totalPrice, --invoiceIndex, 7);
            allCustomerInvoices.setValueAt(totalItems, invoiceIndex, 4);
            double daf3Tafseely = 0;
            String ffffddd = "";
            for (int i = 0; i < allCustomerInvoices.getRowCount(); i++) {
                XWPFTableRow tableRowTwo = table.createRow();
                tableRowTwo.getCell(0).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 0)));
                tableRowTwo.getCell(1).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 1)));
                tableRowTwo.getCell(2).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 2)));
                tableRowTwo.getCell(3).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 3)));
                tableRowTwo.getCell(4).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 4)));
                tableRowTwo.getCell(5).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 5)));
                tableRowTwo.getCell(6).setText(String.valueOf(allCustomerInvoices.getValueAt(i, 6)));
                ffffddd = String.valueOf(allCustomerInvoices.getValueAt(i, 7));
                if (ffffddd.equals("null")) {
                    ffffddd = "";
                }
                tableRowTwo.getCell(7).setText(ffffddd);
                if (String.valueOf(allCustomerInvoices.getValueAt(i, 6)).length() != 0) {
                    daf3Tafseely += Integer.parseInt(String.valueOf(allCustomerInvoices.getValueAt(i, 6)));
                }
            }
            XWPFTableRow tableRowTwo = table.createRow();
            tableRowTwo.getCell(6).setText("Have To Pay");
            tableRowTwo.getCell(7).setText((Double.parseDouble(ffffddd) - daf3Tafseely - Double.parseDouble(discount)) + "");

            XWPFTableRow tableRowTwos = table.createRow();
            tableRowTwos.getCell(6).setText("Discount");
            tableRowTwos.getCell(7).setText(discount + "");
            System.out.println(totalPrice);
            XWPFTableRow tableRowTwoss = table.createRow();
            tableRowTwoss.getCell(6).setText("Total Paid");
            tableRowTwoss.getCell(7).setText(daf3Tafseely + "");

            cX.setName("جرد جزئى");
            cX.setDocument(document);
            cX.createKa4f();

            totalItems = 0;

        } catch (SQLException | IOException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XmlException ex) {
            Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void PayByCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayByCodeActionPerformed
        // TODO add your handling code here:
        String itemName;
        int customerID = 0;
        String customerNameString = null;
        String line = null;
        itemName = JOptionPane.showInputDialog(this, "ادخل الكود بدون مسافات");
        if (itemName.trim().length() > 0) {
            Connection conn = null;
            Statement stmt = null;
            ResultSet resultSet;

            try {
                conn = DriverManager.getConnection(Connect.URL, Connect.HOST_NAME, Connect.PASSWORD);
                stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                stmt2 = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                resultSet = stmt.executeQuery("SELECT customerID FROM Customer WHERE customerName='" + customerNameIDComboSearch.getSelectedItem().toString() + "'");
                resultSet.next();
                customerID = resultSet.getInt(1);
                stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                //resultSet = stmt.executeQuery("SELECT customerName FROM Customer WHERE customerID=" + customerID + "");
                //resultSet.next();
                customerNameString = customerNameIDComboSearch.getSelectedItem().toString();
            } catch (SQLException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    stmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

          //  File f = new File("payment/" + customerNameString + ".txt");
            //if (f.exists()) {
            //  Scanner s = null;
            // try {
            //   s = new Scanner(f);
            //} catch (FileNotFoundException ex) {
            //  Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            //}
            //while (s.hasNext()) {
            //  line = s.nextLine();
            //if (line.contains(recID)) {
            //  break;
            //}
            //}
            //System.err.println(customerNameString);
            try {
                String query = "SELECT costomerType FROM Customer WHERE customerName='" + customerNameString + "'";
                resultSet = stmt2.executeQuery(query);
                resultSet.next();
                customerType = resultSet.getString(1);
            } catch (SQLException sQLException) {
                sQLException.printStackTrace();
            } finally {
                try {
                    stmt.close();
                    conn.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            // StringTokenizer st = new StringTokenizer(line, ",");
            //st.nextToken();
            //val = Float.parseFloat(st.nextToken());
            PaymentByCode frame2 = null;
            System.out.println(customerType);

            try {
                frame2 = new PaymentByCode(customerNameString, val, customerType, itemName, customerID);
            } catch (SQLException ex) {
                Logger.getLogger(AccountPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame2.setVisible(true);

        }

        // }

    }//GEN-LAST:event_PayByCodeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PayByCode;
    public static javax.swing.JTable allCustomerInvoices;
    private javax.swing.JPanel customerAccountPane;
    private javax.swing.JLabel customerAddress;
    private javax.swing.JLabel customerMail;
    private javax.swing.JLabel customerName;
    public static javax.swing.JComboBox<String> customerNameIDComboSearch;
    private javax.swing.JLabel customerPhone;
    private javax.swing.JLabel customerPhone1;
    private javax.swing.JLabel customerPhone2;
    private javax.swing.JLabel customerPhone3;
    private javax.swing.JLabel customerPhone4;
    private javax.swing.JLabel customerPhone5;
    private javax.swing.JComboBox<String> customerTypeComboSearch;
    private org.jdesktop.swingx.JXDatePicker fromDate;
    public static javax.swing.JLabel haveToPay;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton payByInvoice;
    public static javax.swing.JLabel setDiscount;
    private javax.swing.JCheckBox specificCode;
    private javax.swing.JComboBox stus;
    private org.jdesktop.swingx.JXDatePicker toDate;
    // End of variables declaration//GEN-END:variables

    public void daf3Agel() {
        try {
            // TODO add your handling code here:

            String name = customerNameIDComboSearch.getSelectedItem().toString();
            if (name.trim().length() <= 0) {
                JOptionPane.showInputDialog("اسم العميل");
            }
            if (name.trim().length() > 0) {
                float val = Float.parseFloat(JOptionPane.showInputDialog("قيمة الدفع "));
                DebtData.execute(name, val);
                JOptionPane.showMessageDialog(this, "تم تسجيل الدفع بنجاح");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Check name or value");
            ex.printStackTrace();
        }
    }

    public static void daf3Agel(String name, float val) {
        CustomersReports cr = new CustomersReports();
        Timestamp t = new Timestamp(System.currentTimeMillis());
        cr.writeDataIntoFile(name, t.toString(), String.valueOf(val));
    }

}
